---
# action.yml
name: 'Scibuilder mamba build'
description: 'Run Scibuilder Mamba build'
inputs:
  install-folder:
    description: 'Installation prefix'
    required: true
  module-folder:
    description: 'Modulefile prefix'
    required: true
  environments-folder:
    description: 'Folder of environments'
    required: true
  only_changed_files:
    description: 'If nonempty, use the changed-files action to only run on environment files which have been updated'
    default: ''
  freeze-file:
    description: 'File that lists frozen environments that will be skipped'
    default: ''
  hash-length:
    description: 'Hash length for environments'
    default: 7
  version-separator:
    description: "Character that separates the name of the module from the version in the environment's name-field"
    default: '_'
  micromamba:
    description: 'Micromamba download url'
    default: 'https://micro.mamba.pm/api/micromamba/linux-64/latest'
  cuda-override:
    description: 'Value of CONDA_OVERRIDE_CUDA'
    default: '12.1'
  lmod-dir:
    description: 'Directory where Lmod is installed. Set to LMOD_DIR in interactive shells.'
    default: '/usr/share/lmod/lmod/libexec'
  lmod-replace-name:
    description: 'String that will be replaced with the name in custom modules'
    default: '__name__'
  lmod-replace-version:
    description: 'String that will be replaced with the version in custom modules'
    default: '__version__'
  lmod-replace-prefix:
    description: 'String that will be replaced with the installation prefix in custom modules'
    default: '__prefix__'
runs:
  using: 'composite'
  steps:
  - name: Get changed files
    id: changed-files
    uses: tj-actions/changed-files@a2600ce61d4b9f7074622ca3a2f5e497524e6532
    with:
      files: |
        ${{ inputs.environment_folder }}/*.yml
        ${{ inputs.environment_folder }}/*.yaml
  - name: Create environment
    shell: bash
    env:
      SPACK_CUSTOMIZATIONS: ${{ inputs.customizations }}
      CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
    run: |
      # Set global vars
      export MAIN_DIR=`pwd`
      SEP=${{ inputs.version-separator }}
      FREEZE_FILE="${{ inputs.freeze-file }}"

      echo "::group::Obtain micromamba and yq"
      mkdir -p /mamba

      bash -c "[[ -f /mamba/bin/micromamba ]] || (curl -Ls ${{ inputs.micromamba }} | tar -C /mamba -xvj bin/micromamba )"

      # Obtain yq
      bash -c "[[ -f /mamba/bin/yq ]] || wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /mamba/bin/yq && chmod +x /mamba/bin/yq"
      echo "::endgroup::"

      export PATH=/mamba/bin:$PATH

      if [ -n "${{inputs.only_changed_files}}" ] ; then
          YML_FILES=(${CHANGED_FILES})
      else
          YML_FILES=(`find "${{ inputs.environments-folder }}" -regex '.*\.y[a]*ml'`)
      fi


      echo "::group::Sort environment files with yq and create sha256 checksums"
      for YML_FILE in "${YML_FILES[@]}"
      do
        YML_FILE_DIR=`dirname $YML_FILE`
        YML_FILE_NAME=`basename $YML_FILE`
        echo "Processing ${YML_FILE_NAME}"

        cd $YML_FILE_DIR

        yq --inplace eval '(... | select(type == "!!seq")) |= sort' $YML_FILE_NAME
        sha256sum $YML_FILE_NAME > $YML_FILE_NAME.sha256sum

        cd $MAIN_DIR
      done
      echo "::endgroup::"

      echo "::group::Setting cache directory configuration"
      echo "Configuring mamba to use /cache/mamba/pkgs for pkgs_dirs"
      mkdir -p /cache/mamba/pkgs
      micromamba config prepend pkgs_dirs /cache/mamba/pkgs
      echo "Configuring pip to use local cache for http and http-v2 caches"
      rm -rf ~/.cache/pip
      mkdir -p ~/.cache/pip
      mkdir -p /cache/pip/{http,http-v2}
      ln -s /cache/pip/http ~/.cache/pip/http
      ln -s /cache/pip/http-v2 ~/.cache/pip/http-v2
      echo "::endgroup::"

      echo "::group::Setting CUDA override"
      export CONDA_OVERRIDE_CUDA="${{ inputs.cuda-override }}"
      echo "CONDA_OVERRIDE_CUDA=${CONDA_OVERRIDE_CUDA}"
      echo "::endgroup::"

      echo "::group::Creating installation folders"
      mkdir -p "${{ inputs.install-folder }}"
      echo "::endgroup::"

      for YML_FILE in "${YML_FILES[@]}"
      do
        YML_FILE_NAME=`basename $YML_FILE`
        echo "::group::Installing environment from ${YML_FILE_NAME}"

        FULLNAME=`yq ".name" $YML_FILE`
        NAME=`echo ${FULLNAME} | cut -f 1 -d "${SEP}"`
        VERSION=`echo ${FULLNAME} | cut -f 2 -d "${SEP}"`
        if [[ "$NAME" == "$VERSION" ]]
        then
          echo "Cannot determine version from environment name: ${FULLNAME}"
          echo "Expected environment name to be in format: NAME${SEP}VERSION"
          exit 1
        fi

        INSTALL_FOLDER="${{ inputs.install-folder }}/${NAME}/${VERSION}"
        if [[ ${{ inputs.hash-length }} -gt 0 ]]
        then
          HASH_SHORT=`head -c ${{ inputs.hash-length }} $YML_FILE.sha256sum`
          INSTALL_FOLDER="${INSTALL_FOLDER}/${HASH_SHORT}"
        fi

        if [[ "${INSTALL_FOLDER}" =~ ' ' ]]
        then
          echo "Installation folder should not contain spaces: \"${INSTALL_FOLDER}\""
          exit 1
        fi

        INSTALL_ENV=0
        if [[ -f "${FREEZE_FILE}" ]]
        then
          grep -q "${NAME}\/${VERSION}" "${FREEZE_FILE}" && FREEZE_RESULT=0 || FREEZE_RESULT=1
          if [[ $FREEZE_RESULT -eq 0 ]]
          then
            echo "Environment ${NAME}/${VERSION} is marked as frozen, just re-creating modules."
            INSTALL_ENV=1
          fi
        fi

        if [[ -d "${INSTALL_FOLDER}" ]] && [[ $INSTALL_ENV -eq 0 ]]
        then
          if [[ -f "${INSTALL_FOLDER}/${YML_FILE_NAME}" ]]
          then
            diff -q ${INSTALL_FOLDER}/${YML_FILE_NAME} ${YML_FILE} &> /dev/null
            DIFF_RESULT=$?
            if [[ $DIFF_RESULT -eq 0 ]]
            then
              echo "Environment ${NAME}/${VERSION} already exists in ${INSTALL_FOLDER}"
              INSTALL_ENV=1
            else
              echo "Environment ${NAME}/${VERSION} already exists in ${INSTALL_FOLDER}, but the environment file does not match the one given."
              exit 1
            fi
          else
            echo "Failed installation directory found in \"${INSTALL_FOLDER}\"."
            echo "Removing it and starting a fresh installation."
            rm -rf "${INSTALL_FOLDER}"
          fi
        fi

        if [[ "${INSTALL_ENV}" -eq 0 ]]
        then
          echo "Installing ${NAME}/${VERSION} to ${INSTALL_FOLDER}"

          micromamba create -y -f $YML_FILE -p ${INSTALL_FOLDER}

          echo "Exporting realized env file to ${INSTALL_FOLDER}"

          micromamba env export --no-build -p ${INSTALL_FOLDER} > ${INSTALL_FOLDER}/${YML_FILE_NAME}.lock
          micromamba env export -p ${INSTALL_FOLDER} > ${INSTALL_FOLDER}/${YML_FILE_NAME}.build-lock

          echo "Cleaning up pip wheel cache"
          rm -rf ~/.cache/pip/wheels
        fi

        CUSTOM_CONDARC_NAME=${YML_FILE/.yml/.condarc}
        CUSTOM_CONDARC_NAME=${CUSTOM_CONDARC_NAME/.yaml/.condarc}

        if [[ -f "${CUSTOM_CONDARC_NAME}" ]]
        then
          echo "Adding custom condarc to environment ${NAME}/${VERSION}"
          cp ${CUSTOM_CONDARC_NAME} ${INSTALL_FOLDER}/condarc
        fi

        MODULE_FOLDER="${{ inputs.module-folder }}/${NAME}"

        mkdir -p $MODULE_FOLDER

        CUSTOM_MODULE_NAME=${YML_FILE/.yml/.lua}
        CUSTOM_MODULE_NAME=${CUSTOM_MODULE_NAME/.yaml/.lua}

        if [[ -f "${CUSTOM_MODULE_NAME}" ]]
        then
          echo "Creating modulefile for environment ${NAME}/${VERSION} from custom module file"
          cp ${CUSTOM_MODULE_NAME} ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-name }}:${NAME}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-version }}:${VERSION}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-prefix }}:${INSTALL_FOLDER}:g" ${MODULE_FOLDER}/${VERSION}.lua
        else
          echo "Creating modulefile for environment ${NAME}/${VERSION}"
          cat << EOF > ${MODULE_FOLDER}/${VERSION}.lua
      -- -*- lua -*-"
      --
      -- Module file created by scibuilder
      --

      whatis([[Name : ${NAME}]])
      whatis([[Version : ${VERSION}]])
      help([[This is an automatically created Python environment.]])

      prepend_path("PATH", "${INSTALL_FOLDER}/bin")
      setenv("CONDA_PREFIX", "${INSTALL_FOLDER}")

      setenv("CONDA_ENVIRONMENT_YML", "${INSTALL_FOLDER}/${YML_FILE_NAME}")
      EOF
        fi

        CUSTOM_MODULE_ADDITIONS_NAME=${YML_FILE/.yml/.lua_additions}
        CUSTOM_MODULE_ADDITIONS_NAME=${CUSTOM_MODULE_ADDITIONS_NAME/.yaml/.lua_additions}
        if [[ -f "${CUSTOM_MODULE_ADDITIONS_NAME}" ]]
        then
          echo "Adding custom additions to module ${NAME}/${VERSION}"
          cat ${CUSTOM_MODULE_ADDITIONS_NAME} >> ${MODULE_FOLDER}/${VERSION}.lua
        fi

        echo "::group::Verifying module directory"
        ${{ inputs.lmod-dir }}/check_module_tree_syntax ${{ inputs.module-folder }}
        echo "::endgroup::"

        if [[ $INSTALL_ENV -eq 0 ]]
        then
          echo "Copying environment file and checksum to ${INSTALL_FOLDER}"
          cp $YML_FILE ${INSTALL_FOLDER}/${YML_FILE_NAME}
          cp $YML_FILE.sha256sum ${INSTALL_FOLDER}/${YML_FILE_NAME}.sha256sum
          echo "::endgroup::"
        fi

      done
