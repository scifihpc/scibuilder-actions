---
# action.yml
name: 'Spack environment build'
description: 'Build a spack environment'
inputs:
  spack-location:
    description: 'Location where repository will be cloned into'
    default: /spack
  cache-location:
    description: 'Location where additional cache will be located'
    default: /cache
  buildcache-location:
    description: 'Location where buildcache will be created'
    default: /buildcache
  buildcache-name:
    description: 'Name of the buildcache'
    default: final
  environment:
    description: 'Environment to build'
    required: true
  env-vars:
    description: 'Extra env vars for the build'
    default: ''
  makefile-build:
    description: "Use Spack's Makefile for parallel building"
    default: ''
  debug-build:
    description: "Run Spack commands with debug enabled"
    default: ''
  buildcache-install:
    description: "Only install from buildcache"
    default: ''
  buildcache-flags:
    description: "Extra flags for the buildcache push"
    default: '--unsigned --private'
  njobs:
    description: 'Number of jobs for building'
    default: 16
  ulimit:
    description: 'Number of files that can be opened by ulimit'
    default: 65536
  included-environments:
    description: 'Concrete environments that should be included in env'
    default: ''
  spack-lock-destination:
    description: 'Where to export spack.lock. Empty path (default) means no export'
    default: ''
runs:
  using: 'composite'
  steps:
  - name: Build environment
    shell: bash
    run: |

      DEBUG_FLAGS=""
      DEBUG_BUILD="${{ inputs.debug-build }}"
      if [[ ! -z "$DEBUG_BUILD" ]]
      then
        DEBUG_FLAGS="-d"
      fi

      echo "::group::Increasing ulimit"
      ulimit -Sn ${{ inputs.ulimit }}
      echo "::endgroup::"

      CACHE_DIR=${{ inputs.cache-location }}
      YQ=${CACHE_DIR}/bin/yq
      if [[ ! -f ${YQ} ]]
      then
        echo 'Obtaining yq for configuration modifications'
        mkdir -p `dirname ${YQ}`
        curl -L -o ${YQ} https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        chmod +x ${YQ}
      fi

      EXTRA_ENV_VARS="${{ inputs.env-vars }}"
      if [[ ! -z "$EXTRA_ENV_VARS" ]]
      then
        echo "::group::Setting extra environment variables"
        echo "Extra env vars: $EXTRA_ENV_VARS"
        export $EXTRA_ENV_VARS
        echo "::endgroup::"
      fi

      echo "::group::Activate spack and set up bootstrap store"
      SPACK_LOCATION=${{ inputs.spack-location }}
      echo "Activating spack from ${SPACK_LOCATION}"
      source ${SPACK_LOCATION}/share/spack/setup-env.sh

      echo "Using buildcache from ${BUILDCACHE_LOCATION}"
      BUILDCACHE_LOCATION=${{ inputs.buildcache-location }}
      BUILDCACHE_NAME=${{ inputs.buildcache-name }}

      mkdir -p ${BUILDCACHE_LOCATION}

      echo "Cleaning misc spack cache"
      spack ${DEBUG_FLAGS} clean -m

      echo "Setting bootstrap store in ${BUILDCACHE_LOCATION}/bootstrap"
      spack ${DEBUG_FLAGS} bootstrap root ${BUILDCACHE_LOCATION}/bootstrap
      echo "::endgroup::"

      included_env_paths=(${{ inputs.included-environments }})
      len_paths=${#included_env_paths[@]}
      if [[ "${included_env_paths[0]}" != '' ]]
      then
        echo "::group::Adding other concrete environments to the environment"
        ${YQ} -i ".spack.include_concrete // .spack.include_concrete = []" ${{ inputs.environment }}/spack.yaml
        for ((i=0; i<$len_paths; i++))
        do
          included_env_path=`realpath ${included_env_paths[i]}`
          echo "Adding concrete env ${included_env_path}"
          ${YQ} -i "with(.spack.include_concrete; select(all_c(. == \"${included_env_path}\")) | . += \"${included_env_path}\")" ${{ inputs.environment }}/spack.yaml
        done
      fi
      echo "::endgroup::"

      echo "::group::Activate environment and create build cache"
      spack ${DEBUG_FLAGS} env activate ${{ inputs.environment }}

      echo "Setting buildcache to be ${BUILDCACHE_LOCATION}/${BUILDCACHE_NAME}"
      mkdir -p ${BUILDCACHE_LOCATION}/${BUILDCACHE_NAME}
      bash -c "spack ${DEBUG_FLAGS} mirror list | grep -q ${BUILDCACHE_NAME}_buildcache || spack ${DEBUG_FLAGS} mirror add ${BUILDCACHE_NAME}_buildcache ${BUILDCACHE_LOCATION}/${BUILDCACHE_NAME}"
      echo "::endgroup::"

      echo "::group::List installed packages in buildcache"
      spack ${DEBUG_FLAGS} buildcache list --allarch --long --variants
      echo "::endgroup::"

      echo "::group::List installed packages"
      spack ${DEBUG_FLAGS} reindex
      spack ${DEBUG_FLAGS} find
      echo "::endgroup::"

      echo "Compilers defined:"
      spack ${DEBUG_FLAGS} --env-dir ${{ inputs.environment }} compiler list
      echo "::endgroup::"

      echo "::group::Concretize environment"
      spack ${DEBUG_FLAGS} concretize -f
      echo "::endgroup::"

      BUILDCACHE_INSTALL="${{ inputs.buildcache-install }}"
      if [[ ! -z "$BUILDCACHE_INSTALL" ]]
      then
          buildcache_args="--use-buildcache package:only,dependencies:only --include-build-deps"
      else
          buildcache_args=""
      fi

      MAKEFILE_BUILD="${{ inputs.makefile-build }}"
      if [[ ! -z "$MAKEFILE_BUILD" ]]
      then
        echo "::group::Install environment with Makefile"
        spack ${DEBUG_FLAGS} env depfile -o Makefile
        make -j "${{ inputs.njobs }}" SPACK_INSTALL_FLAGS="--no-check-signature ${buildcache_args}"
        echo "::endgroup::"
      else
        echo "::group::Install environment"
        bash -c "spack ${DEBUG_FLAGS} install -j ${{ inputs.njobs }} ${buildcache_args} --no-check-signature --fail-fast || spack ${DEBUG_FLAGS} install ${buildcache_args} --no-check-signature --fail-fast --verbose"
        echo "::endgroup::"
      fi

      echo "::group::Refresh Lmod modules"
      spack ${DEBUG_FLAGS} module lmod refresh --delete-tree --yes
      echo "::endgroup::"

      echo "::group::Push finished products to buildcache"
      spack ${DEBUG_FLAGS} buildcache push ${{ inputs.buildcache-flags }} ${BUILDCACHE_LOCATION}/${BUILDCACHE_NAME}

      # Update buildcache index
      spack ${DEBUG_FLAGS} buildcache update-index ${BUILDCACHE_LOCATION}/${BUILDCACHE_NAME}

      spack ${DEBUG_FLAGS} mirror remove ${BUILDCACHE_NAME}_buildcache
      echo "::endgroup::"

      if [[ ! -z "${{ inputs.spack-lock-destination }}" ]]
      then
        echo "::group::Export spack.lock"
        cp ${{ inputs.environment }}/spack.lock ${{ inputs.spack-lock-destination }}/spack.lock
        echo "spack.lock exported to ${{ inputs.spack-lock-destination }}/spack.lock"
        echo "::endgroup::"
      fi
